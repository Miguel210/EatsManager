// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}


model module {
  id String @id @default(uuid())
  name String @db.VarChar(50)
  createAt DateTime @default(now())
  isActive Boolean @default(true)
}

model operation {
  id String @id @default(uuid())
  name String @db.VarChar(50)
  createAt DateTime @default(now())
  isActive Boolean @default(true)
  profile profileOperation[]
}

model profileOperation {
  id String @id @default(uuid())
  profileId String
  operationId String
  createAt DateTime @default(now())
  isActive Boolean @default(true)

  operation operation @relation(fields: [operationId], references: [id])
  profile profile @relation(fields: [profileId], references: [id])

}

model profile {
  id String @id @default(uuid())
  name String
  createAt DateTime @default(now())
  isActive Boolean @default(true)

  operation profileOperation[]
  user user[]
}

model gender {
  id String @id @default(uuid())
  name String
  createAt DateTime @default(now())
  isActive Boolean @default(true)

  person person[]

}
model person {
  id String @id @default(uuid())
  fullname String
  phoneNumber String
  address String
  genderId String
  birthDate DateTime

  gender gender @relation(fields: [genderId], references: [id])
  employee employee[]
}

model employee {
  id String @id @default(uuid())
  personId String @unique
  hireDate DateTime

  person person @relation(fields: [personId], references: [id])
  employeeHistory employeeHistory[]
  attendance attendance[]
  evaluation evaluation[]
  user user[]
}

model employeeHistory {
  id String @id @default(uuid())
  employeeId String
  checkin DateTime
  departure DateTime
  salaty Decimal @db.Decimal(10,2)

  employee employee @relation(fields: [employeeId], references: [id])
}

model statusAttendance {
  id String @id @default(uuid())
  name String 

  attendance attendance[]
}
model attendance {
  id String @id @default(uuid())
  employeeId String 
  statusAttendaceId String
  time DateTime

  employee employee @relation(fields: [employeeId], references: [id])
  statusAttendance statusAttendance @relation(fields: [statusAttendaceId], references: [id])
}

model evaluation {
  id String @id @default(uuid())
  employeeId String
  date DateTime
  result String @db.Text

  employee employee @relation(fields: [employeeId], references: [id])
}

model user {
  id String @id @default(uuid())
  profileId String
  employeeId String @unique
  username String @unique
  password String
  lastLogin DateTime

  profile profile @relation(fields: [profileId],references: [id])
  employee employee @relation(fields: [employeeId], references: [id])
  clientOrder clientOrder[]
}
//* CREATION SUPPLIER
model supplier {
  id String @id @default(uuid())
  fullname String
  phoneNumber String
  contact String
  address String

  supplierOrder supplierOrder[]
  paymentSupplier paymentSupplier[]
}

model statusSupplierOrder {
  id String @id @default(uuid())
  name String

  supplierOrder supplierOrder[]
}
model supplierOrder {
  id String @id @default(uuid())
  supplierId String
  statusId String
  date DateTime
  totalAmount Decimal @db.Decimal(10,2)

  supplier supplier @relation(fields: [supplierId], references: [id])
  statusSupplierOrder statusSupplierOrder @relation(fields: [statusId],references: [id])
  paymentSupplier paymentSupplier[]
  supplierOrderDetails supplierOrderDetails[]
}

model statuspaymentSupplier {
  id String @id @default(uuid())
  name String

  paymentSupplier paymentSupplier[]
}
model paymentSupplier {
  id String @id @default(uuid())
  supplierId String
  supplierOrderId String
  statusId String
  payDate DateTime
  amount Decimal @db.Decimal(10,2)

  supplier supplier @relation(fields: [supplierId], references: [id])
  supplierOrder supplierOrder @relation(fields: [supplierOrderId], references: [id])
  statuspaymentSupplier statuspaymentSupplier @relation(fields: [statusId], references: [id])
}

model statusSupplierOrderDetail {
  id String @id @default(uuid())
  name String

  supplierOrderDetails supplierOrderDetails[]
}
model supplierOrderDetails {
  id String @id @default(uuid())
  supplierOrderId String
  productId String
  statusId String
  quantity Int
  costPiece Decimal @db.Decimal(10,2)
  subtotal Decimal @db.Decimal(10,2)
  note String @db.Text

  supplierOrder supplierOrder @relation(fields: [supplierOrderId], references: [id])
  product  product @relation(fields: [productId], references: [id])
  statusSupplierOrderDetail statusSupplierOrderDetail @relation(fields: [statusId], references: [id])
}
//* PRODUCT
model product {
  id String @id @default(uuid())
  categoryId String
  unitHeasureId String
  name String
  description String
  purchasePrice Decimal @db.Decimal(10,2)
  salePrice Decimal @db.Decimal(10,2)
  minStock Int
  stock Int 
  image String

  categoryProduct categoryProduct @relation( fields: [categoryId], references: [id])
  unitMeasure unitMeasure @relation( fields: [unitHeasureId], references: [id])
  supplierOrderDetails supplierOrderDetails[]
  inventoryMovement inventoryMovement[]
  productToDish productToDish[]
}

model categoryProduct {
  id String @id @default(uuid())
  name String

  product product[]
}

model unitMeasure {
  id String @id @default(uuid())
  name String

  product product[]
  productToDish productToDish[]
  garrision garrision[]
}
 model statusInventoryMovement {
  id String @id @default(uuid())
  name String

  inventoryMovement inventoryMovement[]
 }
model inventoryMovement {
  id String @id @default(uuid())
  productId String
  statusId String
  quantity Decimal @db.Decimal(10,2)
  date DateTime

  product product @relation(fields: [productId], references: [id])
  statusInventoryMovement statusInventoryMovement @relation(fields: [statusId], references: [id])
}

model productToDish {
  id String @id @default(uuid())
  dishId String
  productId String
  unitMeasureId String
  quantity Decimal

  product product @relation(fields: [productId], references: [id])
  unitMeasure unitMeasure @relation(fields: [unitMeasureId], references: [id])
  dish dish @relation(fields: [dishId], references: [id])
}

model dish {
  id String @id @default(uuid())
  categoryDishId String
  name String
  description String
  price Decimal

  categortyDish categoryDish @relation(fields: [categoryDishId], references:[id])
  productToDish productToDish[]
  detailPromo detailPromo[]
  dishgarrision dishgarrision[]

}

model categoryDish {
  id String @id @default(uuid())
  name String

  dish dish[]
}

model detailPromo {
  id String @id @default(uuid())
  dishId String
  promotionId String

  dish dish @relation(fields: [dishId], references: [id])
  promotion promotion @relation(fields: [promotionId], references: [id])
}

model discountTypePromotion {
  id String @id @default(uuid())
  name String

  promotion promotion[]
}
model promotion {
  id String @id @default(uuid())
  name String
  description String
  discountTypeId String
  discountValue Decimal
  startDate DateTime
  finishDate DateTime

  discountTypePromotion discountTypePromotion @relation(fields: [discountTypeId], references: [id])
  detailPromo detailPromo[]
}
 model statusTable {
  id String @id @default(uuid())
  name String

  table table[]
 }
model table {
  id String @id @default(uuid())
  tableNumber Int
  statusId String
  combinate Boolean

  statusTable statusTable @relation(fields: [statusId],references: [id])
  
//  combinateTables combinateTable[] @relation("CombinateTables")
//  combinateTable combinateTable? @relation("CombinateTable")
  mainTables combinateTable[] @relation("MainTables")
  SecondTables combinateTable[] @relation("SecondTables")
  
  clientOrder clientOrder[]
}
model combinateTable {
  id String @id @default(uuid())
  clientOrderId String
  mainTableId String
  secondTableId String
//  mainTable table @relation("CombinateTables",fields: [tableMainId], references: [id])
//  table2 table? @relation("CombinateTable",fields: [tableSecondId], references: [id])
  mainTable table @relation("MainTables", fields: [mainTableId], references: [id])
  secondTable table @relation("SecondTables", fields: [secondTableId], references: [id])
}
//* ORDER
model statusClientOrder {
  id String @id @default(uuid())
  name String

  clientOrder clientOrder[]
}

model orderMethod {
  id String @id @default(uuid())
  name String

  clientOrder clientOrder[]
}
model clientOrder {
  id String @id @default(uuid())
  userId String
  tableId String
  statusId String
  orderMethodId String
  date DateTime
  clientName String

  user user @relation(fields: [userId], references: [id])
  table table @relation(fields: [tableId], references: [id])
  statusClientOrder statusClientOrder @relation(fields: [statusId], references: [id])
  orderMethod orderMethod @relation(fields: [orderMethodId], references: [id])
  account account[]
}

model clientOrderDetail {
  id String @id @default(uuid())
  clientOrderId String
  dishId String
  quantity Int
  price Decimal
  subtotal Decimal
  personalization String @db.Text

  accountDetail accountDetail[]
  detailOrderGarrision detailOrderGarrision[]
}

model account {
  id String @id @default(uuid())
  clientOrderId String
  total Decimal
  paid Boolean

  clientOrder clientOrder @relation(fields: [clientOrderId], references: [id])
  accountDetail accountDetail[]
}

model accountDetail {
  id String @id @default(uuid())
  accountId String
  orderClientDetailId String
  total Decimal

  clientOrderDetail clientOrderDetail @relation(fields: [orderClientDetailId], references: [id])
  account account @relation(fields: [accountId], references: [id])
}

//*GUARNICION
model dishgarrision {
  id String @id @default(uuid())
  dishId String
  garrisionId String

  dish dish @relation(fields: [dishId], references: [id])
  garrision garrision @relation(fields: [garrisionId], references: [id])

}

model garrision {
  id String @id @default(uuid())
  unitMeasureId String
  name String
  description String
  quantity Decimal

  unitMeasure unitMeasure @relation(fields: [unitMeasureId], references: [id])
  dishgarrision dishgarrision[]
  detailOrderGarrision detailOrderGarrision[]
}

model detailOrderGarrision {
  id String @id @default(uuid())
  clientOrderDetailId String
  garrisionId String

  clientOrderDetail clientOrderDetail @relation(fields: [clientOrderDetailId], references: [id])
  garrision garrision @relation(fields: [garrisionId], references: [id])

}