generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model module {
  id         String      @id @default(uuid())
  name       String      @db.VarChar(50)
  isActive   Boolean     @default(true)
  identifier Int?
  operations operation[]
}

model operation {
  id       String             @id @default(uuid())
  moduleId String
  name     String             @db.VarChar(50)
  isActive Boolean            @default(true)
  metrics  metric[]
  module   module             @relation(fields: [moduleId], references: [id])
  profiles profileOperation[]
}

model metric {
  id          String    @id @default(uuid())
  operationId String
  name        String
  sentence    String
  isActive    Boolean   @default(true)
  operation   operation @relation(fields: [operationId], references: [id])
}

model profileOperation {
  id          String    @id @default(uuid())
  profileId   String
  operationId String
  createAt    DateTime  @default(now())
  isActive    Boolean   @default(true)
  operation   operation @relation(fields: [operationId], references: [id])
  profile     profile   @relation(fields: [profileId], references: [id])
}

model profile {
  id         String             @id @default(uuid())
  name       String
  createAt   DateTime           @default(now())
  isActive   Boolean            @default(true)
  persons    person[]
  operations profileOperation[]
}

model gender {
  id       String   @id @default(uuid())
  name     String
  createAt DateTime @default(now())
  isActive Boolean  @default(true)
  persons  person[]
}

model typeperson {
  id          String   @id @default(uuid())
  description String
  isActive    Boolean  @default(true)
  persons     person[]
}

model person {
  id           String     @id @default(uuid())
  genderId     String
  profileId    String
  typePersonId String
  fullname     String
  username     String
  password     String
  isActive     Boolean    @default(true)
  address      address[]
  costumers    costumer[]
  employees    employee?
  movements    movement[]
  gender       gender     @relation(fields: [genderId], references: [id])
  profile      profile    @relation(fields: [profileId], references: [id])
  typeperson   typeperson @relation(fields: [typePersonId], references: [id])
  suppliers    supplier[]
}

model employee {
  id          String       @id @default(uuid())
  personId    String       @unique
  hireDate    DateTime
  input       DateTime
  output      DateTime
  salary      Decimal      @db.Decimal(10, 2)
  isActive    Boolean      @default(true)
  deleteAt         DateTime?
  isDelete         Boolean          @default(false)
  attendances attendance[]
  person      person       @relation(fields: [personId], references: [id])
  evaluations evaluation[] @relation("Evaluations")
  evaluators evaluation[] @relation("Evaluators")

}

model evaluation {
  id          String   @id @default(uuid())
  employeeId  String
  evaluatorId String
  date        DateTime
  punctuality Int
  attitude    Int
  quality     Int
  efficiency  Int
  initiative  Int
  hygiene     Int
  isActive    Boolean  @default(true)
  deleteAt    DateTime?
  isDelete    Boolean          @default(false)
  empoyee    employee @relation("Evaluations",fields: [employeeId], references: [id])
  evaluator  employee @relation("Evaluators",fields: [evaluatorId], references: [id])

}

model attendance {
  id         String   @id @default(uuid())
  employeeId String
  date       DateTime
  hour       DateTime
  documentId   String 
  isActive   Boolean  @default(true)
  deleteAt         DateTime?
  isDelete         Boolean          @default(false)
  employee   employee @relation(fields: [employeeId], references: [id])
  documents docuemntAttendace @relation( fields: [documentId], references: [id])
}

model docuemntAttendace {
  id String @id @default(uuid())
  description String
  isActive Boolean @default(true)
  deleteAt         DateTime?
  isDelete         Boolean          @default(false)
  attendance attendance[]
}

model address {
  id        String  @id @default(uuid())
  personId  String
  calle1    String
  calle2    String
  cp        String
  reference String
  isActive  Boolean @default(true)
  deleteAt         DateTime?
  isDelete         Boolean          @default(false)
  person    person  @relation(fields: [personId], references: [id])
}

model costumer {
  id       String  @id @default(uuid())
  personId String
  isActive Boolean @default(true)
  deleteAt         DateTime?
  isDelete         Boolean          @default(false)
  person   person  @relation(fields: [personId], references: [id])
}

model supplier {
  id       String  @id @default(uuid())
  personId String
  isActive Boolean @default(true)
  deleteAt         DateTime?
  isDelete         Boolean          @default(false)
  person   person  @relation(fields: [personId], references: [id])
}

model movement {
  id                  String               @id @default(uuid())
  personId            String
  documentId          String
  elaborateId         String?
  amount              Decimal              @db.Decimal(10, 2)
  status              String
  isActive            Boolean              @default(true)
  referenceId         String?
  date                DateTime             @default(now()) @db.Date
  clientOrders        clientOrder[]
  devolutionClients   devolutionClient[]
  devolutionSuppliers devolutionSupplier[]
  inventories         inventory[]
  document            document             @relation(fields: [documentId], references: [id])
  person              person               @relation(fields: [personId], references: [id])
  movement            movement?            @relation("ReferenceMovements", fields: [referenceId], references: [id])
  movements           movement[]           @relation("ReferenceMovements")
  movementDetail      movementDetail[]
  orderPayments       orderPayment[]
  supplierOrders      supplierOrder[]
}

model document {
  id          String     @id @default(uuid())
  isActive    Boolean    @default(true)
  description String
  folio       Int        @db.Integer
  movements   movement[]
}

model movementDetail {
  id          String     @id @default(uuid())
  movementId  String
  quantity    Int
  productId   String
  priceUnit   Decimal    @db.Decimal(10, 2)
  subTotal    Decimal    @db.Decimal(10, 2)
  tax         Decimal    @db.Decimal(10, 2)
  total       Decimal    @db.Decimal(10, 2)
  costUnit    Decimal    @db.Decimal(10, 2)
  promotionId String?
  isActive    Boolean    @default(true)
  movement    movement   @relation(fields: [movementId], references: [id])
  product     product    @relation(fields: [productId], references: [id])
  promotion   promotion? @relation(fields: [promotionId], references: [id])
}

model productType {
  id          String    @id @default(uuid())
  description String
  isActive    Boolean   @default(true)
  useStock    Boolean   @default(true)
  deleteAt         DateTime?
  isDelete         Boolean          @default(false)
  products    product[]
}

model categoryProduct {
  id           String    @id @default(uuid())
  categoryName String
  isActive     Boolean   @default(true)
  deleteAt         DateTime?
  isDelete         Boolean          @default(false)
  products     product[]
}

model product {
  id               String           @id @default(uuid())
  code             String
  description      String
  existence        Int
  price            Decimal          @db.Decimal(10, 2)
  productTypeId    String
  isActive         Boolean          @default(true)
  categoryId       String
  image            String?
  viewMenu         Boolean          @default(false)
  deleteAt         DateTime?
  isDelete         Boolean          @default(false)
  garrisonMainDish garrison[]       @relation("GarrisonMainDish")
  garrisonDish     garrison[]       @relation("GarrisonDish")
  inventories      inventory[]
  movementDetails  movementDetail[]
  category         categoryProduct  @relation(fields: [categoryId], references: [id])
  productType      productType      @relation(fields: [productTypeId], references: [id])
  promotions       promotion[]
}

model inventory {
  id         String   @id @default(uuid())
  movementId String
  productId  String
  quantity   Int
  isActive   Boolean  @default(true)
  movement   movement @relation(fields: [movementId], references: [id])
  product    product  @relation(fields: [productId], references: [id])
}

model promotion {
  id              String           @id @default(uuid())
  productId       String
  price           Decimal          @db.Decimal(10, 2)
  from            DateTime
  until           DateTime
  isActive        Boolean          @default(true)
  deleteAt         DateTime?
  isDelete         Boolean          @default(false)
  movementDetails movementDetail[]
  product         product          @relation(fields: [productId], references: [id])
}

model garrison {
  id                 String              @id @default(uuid())
  dishId             String
  garrisonId         String
  quantity           Decimal?            @db.Decimal(10,2) 
  identifier         Int?
  isActive           Boolean             @default(true)
  deleteAt           DateTime?
  isDelete           Boolean             @default(false)
  clientOrderDetails clientOrderDetail[]
  garrisonMainDish   product             @relation("GarrisonMainDish", fields: [dishId], references: [id])
  garrisonDish       product             @relation("GarrisonDish", fields: [garrisonId], references: [id])
}

model clientOrder {
  id                 String              @id @default(uuid())
  movementId         String
  invoiceFolio       String
  tableId            String
  paymentDate        DateTime
  status             String
  isActive           Boolean             @default(true)
  movement           movement            @relation(fields: [movementId], references: [id])
  table              table               @relation(fields: [tableId], references: [id])
  clientOrderDetails clientOrderDetail[]
}

model table {
  id          String        @id @default(uuid())
  description String
  status      String
  mainTableId String?
  isActive    Boolean       @default(true)
  deleteAt         DateTime?
  isDelete         Boolean          @default(false)
  clientOrder clientOrder[]
  tabless     table?        @relation("ReferenceTable", fields: [mainTableId], references: [id])
  tables      table[]       @relation("ReferenceTable")
}

model clientOrderDetail {
  id            String      @id @default(uuid())
  clientOrderId String
  garrisonId    String
  isActive      Boolean     @default(true)
  clientOrder   clientOrder @relation(fields: [clientOrderId], references: [id])
  garrison      garrison    @relation(fields: [garrisonId], references: [id])
}

model orderPayment {
  id         String    @id @default(uuid())
  movementId String
  amount     Decimal   @db.Decimal(10, 2)
  status     String
  isActive   Boolean   @default(true)
  movement   movement  @relation(fields: [movementId], references: [id])
  payments   payment[]
}

model payment {
  id             String       @id @default(uuid())
  orderPaymentId String
  amount         Decimal      @db.Decimal(10, 2)
  typePaymentId  String
  isActive       Boolean      @default(true)
  orderPayment   orderPayment @relation(fields: [orderPaymentId], references: [id])
  typePayment    typePayment  @relation(fields: [typePaymentId], references: [id])
}

model typePayment {
  id          String    @id @default(uuid())
  description String
  isActive    Boolean   @default(true)
  payments    payment[]
}

model supplierOrder {
  id           String   @id @default(uuid())
  movementId   String
  invoiceFolio String
  paymentDate  DateTime
  status       String
  isActive     Boolean  @default(true)
  movement     movement @relation(fields: [movementId], references: [id])
}

model devolutionClient {
  id           String   @id @default(uuid())
  movementId   String
  invoiceFolio String
  paymentDate  DateTime
  status       String
  isActive     Boolean  @default(true)
  movement     movement @relation(fields: [movementId], references: [id])
}

model devolutionSupplier {
  id           String   @id @default(uuid())
  movementId   String
  invoiceFolio String
  paymentDate  DateTime
  status       String
  isActive     Boolean  @default(true)
  movement     movement @relation(fields: [movementId], references: [id])
}
