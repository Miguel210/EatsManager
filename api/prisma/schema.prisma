// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}


model module {
  id String @id @default(uuid())
  name String @db.VarChar(50)
  isActive Boolean @default(true)

  operation operation[]
}

model operation {
  id String @id @default(uuid())
  moduleId String
  name String @db.VarChar(50)
  isActive Boolean @default(true)

  module module @relation(fields: [moduleId], references: [id])
  profile profileOperation[]
}

model profileOperation {
  id String @id @default(uuid())
  profileId String
  operationId String
  createAt DateTime @default(now())
  isActive Boolean @default(true)

  operation operation @relation(fields: [operationId], references: [id])
  profile profile @relation(fields: [profileId], references: [id])

}

model profile {
  id String @id @default(uuid())
  name String
  createAt DateTime @default(now())
  isActive Boolean @default(true)

  operation profileOperation[]
  person person[]
}

model gender {
  id String @id @default(uuid())
  name String
  createAt DateTime @default(now())
  isActive Boolean @default(true)

  person person[]

}

model typeperson {
  id String @id @default(uuid())
  description String
  isActive Boolean @default(true)

  person person[]
}
model person {
  id String @id @default(uuid())
  genderId String
  profileId String
  typePersonId String
  fullname String
  username String
  address String
  isActive Boolean @default(true)

  gender gender @relation(fields: [genderId], references: [id])
  profile profile @relation(fields: [profileId], references: [id])
  typeperson typeperson @relation(fields: [typePersonId], references: [id])

  employee employee[]
}

model employee {
  id String @id @default(uuid())
  personId String @unique
  hireDate DateTime
  input DateTime
  output DateTime
  salary Decimal @db.Decimal(10,2)
  isActive Boolean @default(true)

  person person @relation(fields: [personId], references: [id])
  attendance attendance[]
}

model attendance {
  id String @id @default(uuid())
  employeeId String
  date DateTime
  hour DateTime
  document String

  employee employee @relation(fields: [employeeId], references: [id])
}

